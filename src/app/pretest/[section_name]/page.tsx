"use client"
import Header from "@/components/Header"
import { Russo_One } from "next/font/google"
import st from "./pretest.module.scss"
import Level from "@/components/Level"
import { Text } from "@chakra-ui/react"
import { useState, useEffect } from "react"
import { SectionNames } from "@/words"
import { Tests } from "@/tests"
import { useRouter } from "next/navigation"

const font = Russo_One({
  subsets: ["latin"],
  weight: "400",
  display: "swap",
})

export default function PreTest({ params }: { params: { section_name: string } }) {
  const [levels, setLevels] = useState<number>(0)
  const [levelsTestResult, setLevelsTestResult] = useState<number[]>([])
  const router = useRouter()
  useEffect(() => {
    const db = Tests.initTests()
    if (!db.hasOwnProperty(params.section_name)) return router.push("/")
    setLevels(
      db[params.section_name].length -
        (db[params.section_name][db[params.section_name].length - 1].length < 4 ? 1 : 0)
    )
    const marks = Tests.getTestLevelsMarks(params.section_name)
    setLevelsTestResult(marks)
    //console.log(marks)
  }, [])
  return (
    <div className={font.className}>
      <Header />
      <div className="container">
        <Text textStyle="2xl" textAlign="center" marginTop="4">
          –¢—ç—Å—Ç—ã –ø–∞ —Ç—ç–º–µ{" "}
          <span style={{ display: levels ? "inline" : "none" }}>
            &quot;{SectionNames[params.section_name]}&quot;
          </span>
        </Text>
        <div className={st.pretestText}>
          <Text>üìö –ü—Ä–∞—Ö–æ–¥–∑—å—Ü–µ —Ç—ç—Å—Ç—ã —ñ –≤—ã–≤—É—á–∞–π—Ü–µ –±–µ–ª–∞—Ä—É—Å–∫—É—é —Ç—ç—Ö–Ω—ñ—á–Ω—É—é —Ç—ç—Ä–º—ñ–Ω–∞–ª–æ–≥—ñ—é.</Text>
          <Text>
            ‚úÖ –ü—Ä—ã –ø—Ä–∞—Ö–æ–¥–∂–∞–Ω–Ω—ñ —Ç—ç—Å—Ç–∞—û –≤—ã –ø–∞–≤—ñ–Ω–Ω—ã –±—É–¥–∑–µ—Ü–µ –≤—ã–±—ñ—Ä–∞—Ü—å –ø—Ä–∞–≤—ñ–ª—å–Ω—ã—è –ø–µ—Ä–∞–∫–ª–∞–¥—ã –¥–ª—è
            —Å–ª–æ—û –∑ –∫–∞—Ä—Ç–∞–∫.
          </Text>
          <Text>
            üîç –ö–∞–ª—ñ –≤—ã –Ω–µ –≤–µ–¥–∞–µ—Ü–µ –ø–µ—Ä–∞–∫–ª–∞–¥ —Å–ª–æ–≤–∞, –≤—ã –º–æ–∂–∞—Ü–µ –ø–µ—Ä–∞–≤—è—Ä–Ω—É—Ü—å –∫–∞—Ä—Ç–∫—É, –∫–ª—ñ–∫–Ω—É—û—à—ã
            –Ω–∞ —è–µ, –∫–∞–± —É–±–∞—á—ã—Ü—å –ø–µ—Ä–∞–∫–ª–∞–¥. –ê–¥–Ω–∞–∫, –ø–µ—Ä–∞–≤—è—Ä–Ω—É—û—à—ã –∫–∞—Ä—Ç–∫—É, –≤—ã –±–æ–ª—å—à –Ω–µ –∑–º–æ–∂–∞—Ü–µ
            –¥–∞—Ü—å –∞–¥–∫–∞–∑ —É —Ç—ç—Å—Ü–µ –ø–∞ –≥—ç—Ç—ã–º —Å–ª–æ–≤–µ (—è–Ω–æ –±—É–¥–∑–µ –∑–∞–ª—ñ—á–∞–Ω–∞ —è–∫ –Ω—è–ø—Ä–∞–≤—ñ–ª—å–Ω–∞–µ), –∞–ª–µ
            –≥—ç—Ç–∞ –Ω–µ –ø–µ—Ä–∞—à–∫–æ–¥–∑—ñ—Ü—å –≤–∞–º –ø—Ä–∞–π—Å—Ü—ñ —Ç—ç—Å—Ç –¥–∞ –∫–∞–Ω—Ü–∞.
          </Text>
          <Text>
            üìà –ü—Ä–∞–≥—Ä—ç—Å –ø—Ä–æ–π–¥–∑–µ–Ω—ã—Ö —Ç—ç—Å—Ç–∞—û –±—É–¥–∑–µ –∑–∞—Ö–æ—û–≤–∞—Ü—Ü–∞ —ñ –∞–¥–ª—é—Å—Ç—Ä–æ—û–≤–∞—Ü—Ü–∞ —û –≤—ã–≥–ª—è–¥–∑–µ
            –ø—Ä–∞—Ü—ç–Ω—Ç–Ω—ã—Ö —Å—É–∞–¥–Ω–æ—Å—ñ–Ω –∫–æ–ª—å–∫–∞—Å—Ü—ñ –ø—Ä–∞–≤—ñ–ª—å–Ω–∞ –∞–¥–∫–∞–∑–∞–Ω—ã—Ö —Å–ª–æ—û –¥–∞ –∞–≥—É–ª—å–Ω–∞–≥–∞ —ñ—Ö –ª—ñ–∫—É.
          </Text>
          <Text>
            üèÜ –ü—Ä–∞–π–¥–∑—ñ—Ü–µ —û—Å–µ —Ç—ç—Å—Ç—ã –Ω–∞ 100% —ñ —Å–≤–∞–±–æ–¥–Ω–∞ –∞–±–º—è—Ä–∫–æ—û–≤–∞–π—Ü–µ —Ç—ç–º—ã, –∑–≤—è–∑–∞–Ω—ã—è –∑ –ê–π–¶—ñ
            —ñ —ç–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞–π, –Ω–∞ –±–µ–ª–∞—Ä—É—Å–∫–∞–π –º–æ–≤–µ!
          </Text>
        </div>
        <div style={{ margin: "30px 0px" }}>
          {Array(levels)
            .fill(0)
            .map((e, i) => {
              return (
                <Level
                  level={i + 1}
                  section={params.section_name}
                  key={i}
                  levelTestResult={levelsTestResult[i] | 0}
                />
              )
            })}
        </div>
      </div>
    </div>
  )
}
